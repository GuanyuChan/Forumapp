
// This is an autogenerated file from Firebase Studio.
'use server';
import type { Category } from '@/lib/types';

interface FlarumTagAttributes {
  name: string;
  description: string | null;
  slug: string;
  color: string;
  icon: string;
  discussionCount: number;
  lastPostedAt: string | null;
  // Depending on 'include', lastPostedDiscussion might be here
}

interface FlarumTag {
  id: string;
  type: 'tags';
  attributes: FlarumTagAttributes;
  relationships?: {
    lastPostedDiscussion?: {
      data?: {
        type: 'discussions';
        id: string;
        // If 'lastPostedDiscussion' is included, its attributes might be available
        // through an 'included' array in the main JSON:API response.
      };
    };
  };
}

interface FlarumApiResponse {
  data: FlarumTag[];
  // Flarum JSON:API can also include related resources here:
  // included?: Array<{ type: string; id: string; attributes: any; relationships?: any }>;
}

export async function fetchCategories(): Promise<Category[]> {
  const apiUrl = process.env.FLARUM_API_URL;
  const apiKey = process.env.FLARUM_API_KEY;

  if (!apiUrl || !apiKey) {
    console.error('Flarum API URL or Key is not configured in .env');
    return [];
  }

  const flarumCategoriesUrl = `${apiUrl}/tags`;

  try {
    const response = await fetch(flarumCategoriesUrl, {
      method: 'GET',
      headers: {
        'Authorization': `Token ${apiKey}`,
        'Content-Type': 'application/vnd.api+json',
      },
      next: { revalidate: 3600 } // Revalidate every hour
    });

    if (!response.ok) {
      console.error(`Failed to fetch categories from Flarum: ${response.status} ${response.statusText}`);
      const errorBody = await response.text();
      console.error("Error body:", errorBody);
      return [];
    }

    const jsonResponse: FlarumApiResponse = await response.json();
    
    // Basic mapping. Flarum's 'tags' are used as categories.
    // 'postCount' and 'lastTopic' details are more complex and may require 'include' parameters
    // or additional API calls for full data. This is a simplified version.
    const categories: Category[] = jsonResponse.data
      .filter(tag => !tag.attributes.isHidden && tag.attributes.position !== null) // Filter out hidden or secondary tags if not desired
      .sort((a, b) => (a.attributes.position ?? 0) - (b.attributes.position ?? 0)) // Sort by position if available
      .map((tag: FlarumTag) => {
        const category: Category = {
          id: tag.id,
          name: tag.attributes.name,
          slug: tag.attributes.slug,
          description: tag.attributes.description,
          topicCount: tag.attributes.discussionCount,
          // postCount is not directly available on /api/tags
          color: tag.attributes.color,
          icon: tag.attributes.icon,
          // lastTopic would ideally come from included lastPostedDiscussion.
          // For now, this is a very simplified placeholder.
          // A more robust solution would parse 'included' data if requested.
          lastTopic: tag.attributes.lastPostedAt ? { title: `Last activity on ${new Date(tag.attributes.lastPostedAt).toLocaleDateString()}` } : undefined,
        };
        return category;
      });

    return categories;
  } catch (error) {
    console.error('Error fetching or parsing categories from Flarum:', error);
    return [];
  }
}
