// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview AI moderation assistance for forum posts.
 *
 * - moderatePost - A function that moderates a user-generated post.
 * - ModeratePostInput - The input type for the moderatePost function.
 * - ModeratePostOutput - The return type for the moderatePost function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ModeratePostInputSchema = z.object({
  postContent: z.string().describe('The content of the user-generated post.'),
  communityGuidelines: z.string().describe('The community guidelines to adhere to.'),
});
export type ModeratePostInput = z.infer<typeof ModeratePostInputSchema>;

const ModeratePostOutputSchema = z.object({
  isFlagged: z.boolean().describe('Whether the post is flagged as potentially inappropriate.'),
  flagReason: z.string().describe('The reason why the post was flagged, if applicable.'),
  confidenceScore: z.number().describe('The confidence score (0-1) of the AI regarding the decision.'),
});
export type ModeratePostOutput = z.infer<typeof ModeratePostOutputSchema>;

export async function moderatePost(input: ModeratePostInput): Promise<ModeratePostOutput> {
  return moderatePostFlow(input);
}

const prompt = ai.definePrompt({
  name: 'moderatePostPrompt',
  input: {schema: ModeratePostInputSchema},
  output: {schema: ModeratePostOutputSchema},
  prompt: `You are an AI assistant that helps moderate user-generated content in a forum. Your task is to determine if the post adheres to the community guidelines provided.

Community Guidelines:
{{communityGuidelines}}

Post Content:
{{postContent}}

Based on the community guidelines, determine if the post should be flagged as inappropriate. Provide a flag reason if the post is flagged. Also, include a confidence score (0-1) for your decision.

Ensure that the output is in the correct JSON format according to the schema description.`, // Ensure valid JSON is returned
});

const moderatePostFlow = ai.defineFlow(
  {
    name: 'moderatePostFlow',
    inputSchema: ModeratePostInputSchema,
    outputSchema: ModeratePostOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
